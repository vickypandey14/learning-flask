Flask Learning – Day 1 Notes

1. Installed Python.  
2. Installed pip.  
3. Created a new folder for learning Flask.  
4. Inside that folder, created a virtual environment using:  

   `python -m venv env`

5. Encountered a PowerShell script execution error while trying to activate the virtual environment:
 
   `File ... cannot be loaded because running scripts is disabled on this system.`

6. Resolved it by running this command in PowerShell (as Administrator):

    `Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser`

7. Successfully activated the virtual environment using:

   `.\env\Scripts\Activate.ps1`

8. Created a `requirements.txt` file.

9. Installed Flask using:

   `pip install flask`

10. Updated the `requirements.txt` file with the installed packages using:

    `pip freeze > requirements.txt`

11. Learned how to deactivate the virtual environment using:

    `deactivate`

12. Created a simple Flask application in `app.py` with the following steps:
    - Imported `Flask` from the `flask` module.
    - Created a Flask application instance using `Flask(__name__)`.
    - Defined a route (`/`) that returns "Hello, World!".
    - Added a conditional block to run the application in debug mode.

13. Learned how to run the Flask project using:

    `python app.py`

    After running the command, the application can be accessed in the browser at `http://127.0.0.1:5000/`.

14. Updated the `app.py` file with the following features:

    - Added a route (`/about`) that displays an about page.

    - Created a dynamic route (`/user/<username>/<age>`) to display a user profile page with a username and age.

    - Added a route (`/post/<int:post_id>`) to handle GET requests and display a specific post by its ID.
    
    - Implemented a route (`/submit`) to handle both GET and POST requests:
        - If the method is POST, it returns a success message for form submission.
        - If the method is GET, it prompts the user to try submitting the form again.

Flask Learning – Day 2 Notes

1. Learned how to use templates in Flask to render dynamic HTML pages.

2. Created a `templates` folder and added the following files:
    - `index.html`: A simple HTML page with a Bootstrap-styled heading.
    - `user.html`: A dynamic HTML page to display user details and a list of skills.

3. Updated the `app.py` file with the following features:
    - Added a route (`/template`) to render the `index.html` file using the `render_template` function.
    - Added a route (`/user-template/<username>/<age>`) to render the `user.html` file dynamically:
        - Passed the `username` and `age` as variables to the template.
        - Included a list of skills (`['Laravel', 'Flask', 'Django', 'PHP', 'JavaScript', 'Python']`) to display in the template.

4. Learned how to use Jinja2 templating in Flask:
    - Used `{{ name }}` and `{{ user_age }}` in `user.html` to display dynamic data.
    - Used a `for` loop in Jinja2 to iterate over the list of skills and display them as a list.
    - Added an `else` block in the `for` loop to handle cases where the list is empty.

5. Tested the application by running `python app.py` and accessing the following routes:
    - `http://127.0.0.1:5000/template` to view the `index.html` page.
    - `http://127.0.0.1:5000/user-template/<username>/<age>` (e.g., `/user-template/Vivek/25`) to view the dynamic user profile page.


Flask Learning – Day 3 Notes

1. Enhanced the `index.html` file to improve the design and layout:

    - Added a Bootstrap-styled container to structure the content.
    - Used the `url_for` function to dynamically link the Bootstrap CSS file and the image file (`logo.png`) from the `static` folder.